<?php

	class Dictionary extends Index {

		private $dictionary;
		private $head;
		private $server;
		private $template;
		private $obj;


		public function __construct( &$masterPage ) 
		{
			$this->dictionary = array();

			if( isset( $masterPage[ 'With Controller' ] ) )
			{
				$checked = $masterPage[ 'With Controller' ]; // Guarda los componentes que requieren de un controlador
				unset( $masterPage[ 'With Controller' ] );
			}//end if

			$uri = 'client/html/master/';

			$this->headTemplate = file_get_contents( $uri . $masterPage[ 'HEAD' ] . '.html' );
			$this->headerTemplate = file_get_contents( $uri . $masterPage[ 'HEADER' ] . '.html' );
			$this->footerTemplate = file_get_contents( $uri . $masterPage[ 'FOOTER' ] . '.html' );

			$this->obj = clone $this->processWithController( $checked );	

			global $server;
			if( isset( $server ) )
				$this->server = $server . '/';
		}//end __construct


		//**********************************************************************************


		//Traduce las partes principales de las paginas
		private function principalTranslate() {
			$this->dictionary[ 'HEAD' ] = $this->getHead();
			$this->dictionary[ 'HEADER' ] = $this->getHeader();
			$this->dictionary[ 'FOOTER' ] = $this->getFooter();
			$this->dictionary[ '[Lx]' ] = '';

		}//end principalTranslate



		//***********************************************************************************


		//Traduce los vinculos a archivos locales en el servidor
		private function translateLocal() {
			$this->setPage( str_replace( "lhref=\"", "href=\"".$this->server, $this->getPage() ) );
			$this->setPage( str_replace( "lsrc=\"", "src=\"".$this->server, $this->getPage() ) );
			$this->setPage( str_replace( "laction=\"", "action=\"".$this->server, $this->getPage() ) );
		}




		//**********************************************************************************

		private function createDictionary( &$array = array() ) {

			//Por cada elemento del parametro array
			foreach ( $array as $key => $value ) {
				$this->dictionary[ $key ] = $value;//guarda en la propiedad dictionary
			}//end foreach

		}//end createDictionary



		//*********************************************************************************************


		//Traduce un template de listado
		private function translateList( &$array, &$template ) {

			foreach( $array as $key => $valor ) {
				$template = str_replace( '{'.$key.'}', $valor, $template );
				
			}//end foreach

			//Devuelve un template traducido
			return $template;

		}//end translate



		//************************************************************************************


		public function translate( &$array = array(), &$template = null ) {
			
			//Si se establecio un template, quiere decir que se traduce una lista
			if( isset( $template ) ) {
				$template = $this->translateList( $array, $template );
				return $template;
			}//end if

			//Crea el diccionario para las principales partes de una pagina
			$this->principalTranslate();

			//Crea el diccionario especifico de la pagina
			$this->createDictionary( $array );			

			foreach( $this->dictionary as $key => $valor ) {

				//Obtiene el template mediante el metodo getPage de la clase Index y lo traduce. Y utiliza el metodo setPage de la clase Index para establecer la pagina.
				$this->setPage( str_replace( '{'.$key.'}', $valor, $this->getPage() ) );

			}//end foreach

			$this->translateLocal();//Traduce los vinculos a archivos locales en el servidor

			//Imprime la página traducida
			echo $this->getPage();		

		}//end translate


		//*******************************************************************************************************


		//Traduce un lista de traducciones para un listado

		public function convertListToString( &$listAsArray, &$template, &$listToString ) {

			$listToString = '';
			foreach ( $listAsArray as $translate ) {
				$templateTemp = $template;//crea un template temporal que en cada iteracion vuelve a tener las claves a traducir
				$listToString = $listToString.$this->translate( $translate, $templateTemp );
			}//end foreach

		}//end convertListToString

		
		//*******************************************************************************************************


		//Definir un template constante del sitio
		public function setDictionaryConst( $template, $key ) {

			if( !array_key_exists( $key, $this->dictionary ) ) {
				$this->dictionary[ $key ] = $template;
				
			}//end if
			
		}//end setDictionaryConst


		public function cualquier()
		{
			$template = $this->obj->getTemplate();
			$this->setDictionaryConst( $template, 'USER BAR' );
		}

		//*******************************************************************************************************

	}//end Dictionary

?>